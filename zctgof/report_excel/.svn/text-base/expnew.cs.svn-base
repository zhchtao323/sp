using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Sql;
namespace ZCT.Data
{
    public enum lx { lx_Number, lx_String, lx_rq, lx_b, lx_gs, Money, MoneyA,form };

    public class ExportExcel
    {

        /// <summary>
        /// Creates Excel Header 		
        /// </summary>
        /// <returns>Excel Header Strings</returns>
        public string ExcelHeader()
        {
            // Excel header
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append("<?xml version=\"1.0\"?>\n");
            sb.Append("<?mso-application progid=\"Excel.Sheet\"?>\n");
            sb.Append("<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" ");
            sb.Append("xmlns:o=\"urn:schemas-microsoft-com:office:office\" ");
            sb.Append("xmlns:x=\"urn:schemas-microsoft-com:office:excel\" ");
            sb.Append("xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\" ");
            sb.Append("xmlns:html=\"http://www.w3.org/TR/REC-html40\">\n");
            sb.Append("<DocumentProperties xmlns=\"urn:schemas-microsoft-com:office:office\">");
            sb.Append("<Author>zct</Author>");
            sb.Append("</DocumentProperties>");
            sb.Append("<ExcelWorkbook xmlns=\"urn:schemas-microsoft-com:office:excel\">\n");
            sb.Append("<ProtectStructure>False</ProtectStructure>\n");
            sb.Append("<ProtectWindows>False</ProtectWindows>\n");
            sb.Append("</ExcelWorkbook>\n");
            return sb.ToString();
        }

        /// <summary>
        /// Read styles and copy it to the Excel string
        /// </summary>
        /// <param name="filename">Styles.config</param>
        /// <returns></returns>
        public string ExcelStyles(string filename)
        {
            System.IO.StreamReader SR;
            string S;
            string strFileText = string.Empty;
            SR = System.IO.File.OpenText(filename);
            S = SR.ReadLine();
            strFileText = S;
            while (S != null)
            {
                S = SR.ReadLine();

                strFileText += S + "\n";
            }
            SR.Close();
            return strFileText;
        }

        public string ExcelWorkSheetOptions()
        {
            // This is Required Only Once ,	But this has to go after the First Worksheet's First Table		
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append("\n<WorksheetOptions xmlns=\"urn:schemas-microsoft-com:office:excel\">\n<Selected/>\n </WorksheetOptions>\n");
            return sb.ToString();
        }
        /// <summary>
        /// Cerates the First Worksheet 
        /// </summary>
        /// <returns>String</returns>
        public string WriteFirstWorkSheet()
        {
            //These tags can be generated by jsut creating an test Excel and Save As "Spreadsheet XML"
            string strFirstWorkSheet = string.Empty;

            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            //	sb+="";
            string strNewLine = "\n";
            strFirstWorkSheet += "<Worksheet ss:Name=\"Sheet1\">" + strNewLine;
            strFirstWorkSheet += "<Table ss:ExpandedColumnCount=\"2\" ss:ExpandedRowCount=\"10\" x:FullColumns=\"1\"   x:FullRows=\"1\">" + strNewLine;
            strFirstWorkSheet += "<Column ss:AutoFitWidth=\"0\" ss:Width=\"79.5\"/>" + strNewLine;
            strFirstWorkSheet += "<Row ss:Index=\"2\">" + strNewLine;
            // Merge Cells
            strFirstWorkSheet += "<Cell ss:MergeAcross=\"1\" ss:StyleID=\"s26\"><Data ss:Type=\"String\">Column Merged</Data></Cell>" + strNewLine;
            strFirstWorkSheet += "</Row>" + strNewLine;
            // Bold
            strFirstWorkSheet += "<Row ss:Index=\"4\">" + strNewLine;
            strFirstWorkSheet += "<Cell ss:StyleID=\"s24\"><Data ss:Type=\"String\">Bold</Data></Cell>" + strNewLine;
            strFirstWorkSheet += "</Row>" + strNewLine;
            strFirstWorkSheet += "<Row ss:Index=\"6\">" + strNewLine;
            //Italics
            strFirstWorkSheet += "<Cell ss:StyleID=\"s25\"><Data ss:Type=\"String\">Italics</Data></Cell>" + strNewLine;
            strFirstWorkSheet += "</Row>" + strNewLine;
            strFirstWorkSheet += "<Row ss:Index=\"8\">" + strNewLine;
            //Hyperlink
            strFirstWorkSheet += "<Cell ss:StyleID=\"s27\" ss:HRef=\"#Worksheet1!A1\" ><Data ss:Type=\"String\">Hyperlink</Data></Cell>" + strNewLine;
            strFirstWorkSheet += "</Row>" + strNewLine;
            //Row Height
            strFirstWorkSheet += "<Row ss:Index=\"10\" ss:AutoFitHeight=\"0\" ss:Height=\"30\">" + strNewLine;
            strFirstWorkSheet += "<Cell><Data ss:Type=\"String\">Row Height</Data></Cell>" + strNewLine;
            strFirstWorkSheet += "</Row>" + strNewLine;
            // Close Tags
            strFirstWorkSheet += "</Table>" + strNewLine;
            strFirstWorkSheet += "</Worksheet>" + strNewLine;

            return strFirstWorkSheet;
        }


        public string RowBegin = "<Row ss:AutoFitHeight=\"1\" >\n"; // <Row ss:StyleID="s29">
        public string RowEnd = "</Row>\n";
        public string WorkBegin = "<Worksheet ss:Name=\"WorkSheet" + "\">";
        public string WorkEnd = "</Worksheet>";
        public string tabelBegin = "<Table>";
        public string tabelEnd = "</Table>";
        public string bookEnd = "</Workbook>\n";
        /// <summary>
        /// 行开始
        /// </summary>
        /// <param name="st"></param>
        /// <returns></returns>
        public string RobBeginSt(string st)
        {
            return "<Row ss:AutoFitHeight=\"1\"  ss:StyleID=\"" + st + "\" >\n";
        }
        /// <summary>
        /// 单元
        /// </summary>
        /// <param name="content"></param>
        /// <param name="lx1"></param>
        /// <returns></returns>
        public string AddCell(string content, lx lx1)
        {
            StringBuilder str = new StringBuilder();
            switch (lx1)
            {
                case lx.lx_Number:
                    str.Append("<Cell><Data ss:Type=\"Number\">" + content + "</Data></Cell>\n");
                    break;
                case lx.Money:
                    str.Append("<Cell ss:StyleID=\"s666\"><Data ss:Type=\"Number\">" + content + "</Data></Cell>\n");
                    break;
                case lx.MoneyA:
                    str.Append("<Cell ss:StyleID=\"s667\"><Data ss:Type=\"Number\">" + content + "</Data></Cell>\n");
                    break;
                case lx.lx_rq:
                    str.Append("<Cell ><Data ss:Type=\"DateTime \">" + content + "</Data></Cell>\n");
                    break;
                case lx.lx_String:
                    str.Append("<Cell><Data ss:Type=\"String\">" + content + "</Data></Cell>\n");
                    break;
                case lx.lx_b:
                    str.Append("<Cell><Data ss:Type=\"Boolean\">" + content + "</Data></Cell>\n");
                    break;
                case lx.lx_gs: //=SUM(R[-6]C:R[-1]C)
                    str.Append("<Cell ss:StyleID=\"s666\" ss:Formula=\"=" + content + "\" ><Data ss:Type=\"Number\"></Data></Cell>\n");
                    //str.Append("<Cell ss:Formula=\"" + content + "\" ><Data ss:Type=\"Number\"></Data></Cell>\n");
                //str.Append("ss:Formula=\"s" + formula + "\" ");
                    break;
              
                //<Cell ss:Formula="=SUM(R[-6]C:R[-1]C)"><Data ss:Type="Number">201</Data></Cell>
            }
            return str.ToString();
        }
        /// <summary>
        /// 单元
        /// </summary>
        /// <param name="content"></param>
        /// <param name="lx1"></param>
        /// <param name="styleId"></param>
        /// <returns></returns>
        public string AddCell(string content, lx lx1, string styleId)
        {
            StringBuilder str = new StringBuilder();
            if (styleId != "")
            { str.Append("<Cell ss:StyleID=\"" + styleId + "\">"); }
            else
            { str.Append("<Cell>"); }
            switch (lx1)
            {
                case lx.lx_Number:
                    str.Append("<Data ss:Type=\"Number\">" + content + "</Data></Cell>\n");
                    break;
                case lx.Money://<Cell ss:StyleID=\"s666\">
                    str.Append("<Data ss:Type=\"Number\">" + content + "</Data></Cell>\n");
                    break;
                case lx.MoneyA:
                    str.Append("<Cell ss:StyleID=\"s667\"><Data ss:Type=\"Number\">" + content + "</Data></Cell>\n");
                    break;
                case lx.lx_rq:
                    str.Append("<Data ss:Type=\"DateTime \">" + content + "</Data></Cell>\n");
                    break;
                case lx.lx_String:
                    str.Append("<Data ss:Type=\"String\">" + content + "</Data></Cell>\n");
                    break;
                case lx.lx_b:
                    str.Append("<Data ss:Type=\"Boolean\">" + content + "</Data></Cell>\n");
                    break;
                case lx.lx_gs: //=SUM(R[-6]C:R[-1]C)
                    str.Append("<Cell ss:Formula=\"" + content + "\" ><Data ss:Type=\"Number\"></Data></Cell>\n");
                    break;
                //<Cell ss:Formula="=SUM(R[-6]C:R[-1]C)"><Data ss:Type="Number">201</Data></Cell>
            }
            return str.ToString();
        }
        /// <summary>
        /// 转换
        /// </summary>
        /// <param name="strHtml"></param>
        /// <returns></returns>
        public static string ConvertHTMLToExcelXML(string strHtml)
        {
            // Just to replace TR with Row
            strHtml = strHtml.Replace("<tr>", "<Row ss:AutoFitHeight=\"1\" >\n");
            strHtml = strHtml.Replace("</tr>", "</Row>\n");

            //replace the cell tags
            strHtml = strHtml.Replace("<td>", "<Cell><Data ss:Type=\"String\">");
            //strHtml = strHtml.Replace("<td>", "<Cell><Data ss:Type=\"Number\">");
            strHtml = strHtml.Replace("</td>", "</Data></Cell>\n");
            return strHtml;
        }

        /// <summary>
        /// 写文件
        /// </summary>
        /// <param name="strExcelXml"></param>
        /// <param name="strFileName"></param>
        public void WriteFile(StringBuilder strExcelXml, string strFileName)
        {
            #region "Write Into File"
            try
            {
                System.IO.File.Delete(strFileName);
                System.IO.StreamWriter sw = new System.IO.StreamWriter(strFileName, true, System.Text.Encoding.Unicode);
                sw.Write(ConvertHTMLToExcelXML(strExcelXml.ToString()));
                sw.Close();
            }
            catch (Exception ex)
            {
                System.Windows.Forms.MessageBox.Show(ex.ToString());
            }
            #endregion
        }
        /// <summary>
        /// 处理Excel文件中对行列的限制
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        public static string EcelRowsl(string str_xml)
        {
            // <Table ss:ExpandedColumnCount="3" ss:ExpandedRowCount="6" x:FullColumns="1"
            int begin = str_xml.IndexOf("ss:ExpandedColumnCount=");
            int end = str_xml.IndexOf("x:FullColumns=");
            int l = end - begin - 1;
            //string str2 = str.Substring(begin, l); 
            //string str2=str.Substring(begin, end - 1);
            str_xml = str_xml.Remove(begin, l);
            //string str3 = str.Substring(begin, begin-end - 1); 
            //str.r

            string str_sty = " <Style ss:ID=\"s666\">\n";
            str_sty = str_sty + "<NumberFormat ss:Format=\"&quot;￥&quot;#,##0.00;&quot;￥&quot;\\-#,##0.00\"/>\n";
            str_sty = str_sty + "</Style>\n";
            int ss = str_xml.IndexOf("</Styles>");
            str_xml = str_xml.Insert(ss, str_sty);
            return str_xml;
        }
        /// <summary>
        /// Xml文件增加样式
        /// </summary>
        /// <param name="str_xml"></param>
        /// <returns></returns>
        public static string AddStyle(string str_xml, string style_str)
        {
            int begin = str_xml.IndexOf(@"</Styles>") - 1;
            str_xml = str_xml.Insert(begin, style_str);
            return str_xml;
        }

    }
}
//ExportExcelzct xls = new ExportExcelzct();
//StringBuilder str = new StringBuilder();
//str.Append(xls.ExcelHeader());//文件头
////str.Append(xls.ExcelStyles());
//str.Append(xls.ExcelWorkSheetOptions());
//// Create First Worksheet tag
//str.Append("<Worksheet ss:Name=\"WorkSheet" + "\">");
//str.Append(xls.ExcelStyles(@"c:\sty.txt"));
//// Then Table Tag
//str.Append("<Table>");

//str.Append(@"<Column ss:AutoFitWidth='1' ss:Width='246'/>");
//输出标题行
//str.Append(xls.ExcelStyles(@"c:\ttt.txt"));
//str.Append(xls.RowBegin);
//str.Append(xls.AddCell("撒娇卡时即可到敬爱肯德基卡的答案是对", lx.lx_String));
//str.Append(xls.RowEnd);
//str.Append("<tr><td>jhsajkjkajkasjkfjksjk</td></tr>");
//输出内容

//输出合计加权

//表尾
//str.Append("</Table>");
//str.Append("</Worksheet>");
//// Close the Workbook tag (in Excel header you can see the Workbook tag)
//str.Append("</Workbook>\n");
//str.Append(xls.ExcelStyles(@"c:\beg.txt"));//从开头取到 数据行开始
////增加数据行
//str.Append(xls.ExcelStyles(@"c:\end.txt"));//取xml 文件从 </Table>  到尾
////写文件
//xls.WriteFile(str, @"c:\bb.xls");


  //private void ExportExcelb(List<GS> gs)
  //      {
  //          ExportExcelzct xls = new ExportExcelzct();
  //          StringBuilder str = new StringBuilder();
  //          str.Append(xls.ExcelStyles(@"c:\beg.txt"));//从开头取到 数据行开始
  //          //增加数据行
  //          int c=1;
  //          foreach (GS gs1 in gs)
  //          { 
  //              str.Append(xls.RowBegin);
  //              str.Append(xls.AddCell(c.ToString(),lx.lx_Number));
  //              str.Append(xls.AddCell(gs1.Ht_sale_name, lx.lx_String));
  //              str.Append(xls.AddCell(gs1.Ht_hwmc, lx.lx_String));
  //              str.Append(xls.AddCell(gs1.Zgpz_Fe.ToString(), lx.lx_Number));
  //              str.Append(xls.RowEnd);
  //              c = c + 1;
  //          }
  //          str.Append(xls.ExcelStyles(@"c:\end.txt"));//取xml 文件从 </Table>  到尾
  //          //写文件
  //          xls.WriteFile(str, @"c:\bb.xls");
  //      }